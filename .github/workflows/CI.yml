name: CI
env:
  DEBUG: napi:*
  APP_NAME: shared-memory-store
  CMAKE_BUILD_PARALLEL_LEVEL: 4
permissions:
  contents: write
  id-token: write
"on":
  push:
    branches:
      - main
    tags-ignore:
      - "**"
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - docs/**
  pull_request: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: npm run build -- --target_arch=x64 --target_platform=darwin
          - host: windows-latest
            build: npm run build -- --target_arch=x64 --target_platform=win32
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: npm run build -- --target_arch=ia32 --target_platform=win32
            target: i686-pc-windows-msvc
          - host: macos-latest
            target: aarch64-apple-darwin
            build: npm run build -- --target_arch=arm64 --target_platform=darwin
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y
            build: |
              npm run build -- --target_arch=arm --target_platform=linux
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: npm run build -- --target_arch=arm64 --target_platform=android
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            build: npm run build -- --target_arch=arm --target_platform=android
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: npm run build -- --target_arch=arm64 --target_platform=win32
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 22
          cache: npm
      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        if: ${{ !matrix.settings.docker }}
        with:
          cmake-version: '3.25.x'
      - name: Cache build
        uses: actions/cache@v4
        with:
          path: |
            build/
            node_modules/.cache/
          key: ${{ matrix.settings.target }}-build-${{ matrix.settings.host }}-${{ hashFiles('**/*.cpp', '**/*.h', 'CMakeLists.txt') }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.14.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: npm install
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}:/build -w /build"
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  build-freebsd:
    runs-on: ubuntu-latest
    name: Build FreeBSD
    steps:
      - uses: actions/checkout@v4
      - name: Build
        id: build
        uses: cross-platform-actions/action@v0.27.0
        env:
          DEBUG: napi:*
        with:
          operating_system: freebsd
          version: "14.2"
          memory: 8G
          cpu_count: 3
          environment_variables: "DEBUG"
          shell: bash
          run: |
            sudo pkg install -y -f curl node libnghttp2 npm cmake
            sudo npm install -g npm --ignore-scripts
            echo "~~~~ node -v ~~~~"
            node -v
            echo "~~~~ npm --version ~~~~"
            npm --version
            echo "~~~~ cmake --version ~~~~"
            cmake --version
            pwd
            ls -lah
            whoami
            env
            freebsd-version
            npm install
            npm run build
            rm -rf node_modules
            rm -rf build
            rm -rf .npm/cache
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-freebsd
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build-freebsd
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
      - name: Install dependencies
        run: npm install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Move artifacts
        run: npm artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
